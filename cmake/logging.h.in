#ifndef LOGGING_H
#define LOGGING_H

#define LEVEL_TRACE    0
#define LEVEL_DEBUG    1
#define LEVEL_INFO     2
#define LEVEL_WARN     3
#define LEVEL_ERROR    4
#define LEVEL_CRITICAL 5
#define LEVEL_OFF      6

// clang-format off
#define LOGGER_ACTIVE_LEVEL @LOGGER_ACTIVE_LEVEL@
#define SPDLOG_ACTIVE_LEVEL SPDLOG_@LOGGER_ACTIVE_LEVEL@
// clang-format on
#define SPDLOG_DEBUG_ON
#define SPDLOG_TRACE_ON

#include <spdlog/spdlog.h>

//! TODO: Replace with constexpr whenever SPDLOG changes to constexpr using std::source_location
#define ASSERT(predicate, format, ...)                                                    \
    static_assert(std::is_same<decltype(predicate), bool>::value, "retval must be bool"); \
    if (!predicate)                                                                       \
    {                                                                                     \
        spdlog::error(FMT_STRING(format), ##__VA_ARGS__);                                 \
        std::abort();                                                                     \
    }

#if !defined(LOGGER_ACTIVE_LEVEL)
#define LOGGER_ACTIVE_LEVEL LEVEL_INFO
#endif

#if LOGGER_ACTIVE_LEVEL == LEVEL_TRACE
#define SET_LOG_LEVEL() spdlog::set_level(spdlog::level::trace);
#elif LOGGER_ACTIVE_LEVEL == LEVEL_DEBUG
#define SET_LOG_LEVEL() spdlog::set_level(spdlog::level::debug);
#elif LOGGER_ACTIVE_LEVEL == LEVEL_INFO
#define SET_LOG_LEVEL() spdlog::set_level(spdlog::level::info);
#elif LOGGER_ACTIVE_LEVEL == LEVEL_WARN
#define SET_LOG_LEVEL() spdlog::set_level(spdlog::level::warn);
#elif LOGGER_ACTIVE_LEVEL == LEVEL_ERROR
#define SET_LOG_LEVEL() spdlog::set_level(spdlog::level::error);
#elif LOGGER_ACTIVE_LEVEL == LEVEL_CRITICAL
#define SET_LOG_LEVEL() spdlog::set_level(spdlog::level::critical);
#else
#define SET_LOG_LEVEL() spdlog::set_level(spdlog::level::off);
#endif

#if LOGGER_ACTIVE_LEVEL <= LEVEL_TRACE
#define TRACE(...)                 \
    (spdlog::default_logger_raw()) \
        ->log(spdlog::source_loc{ __FILE__, __LINE__, SPDLOG_FUNCTION }, spdlog::level::trace, __VA_ARGS__)
#else
#define TRACE(...) (void)0
#endif

#if LOGGER_ACTIVE_LEVEL <= LEVEL_DEBUG
#define DEBUG(...)                 \
    (spdlog::default_logger_raw()) \
        ->log(spdlog::source_loc{ __FILE__, __LINE__, SPDLOG_FUNCTION }, spdlog::level::debug, __VA_ARGS__)
#else
#define DEBUG(...) (void)0
#endif

#if LOGGER_ACTIVE_LEVEL <= LEVEL_INFO
#define INFO(...)                  \
    (spdlog::default_logger_raw()) \
        ->log(spdlog::source_loc{ __FILE__, __LINE__, SPDLOG_FUNCTION }, spdlog::level::info, __VA_ARGS__)
#else
#define INFO(...) (void)0
#endif

#if LOGGER_ACTIVE_LEVEL <= LEVEL_WARN
#define WARN(...)                  \
    (spdlog::default_logger_raw()) \
        ->log(spdlog::source_loc{ __FILE__, __LINE__, SPDLOG_FUNCTION }, spdlog::level::warn, __VA_ARGS__)
#else
#define WARN(...) (void)0
#endif

#if LOGGER_ACTIVE_LEVEL <= LEVEL_ERROR
#define ERROR(...)                 \
    (spdlog::default_logger_raw()) \
        ->log(spdlog::source_loc{ __FILE__, __LINE__, SPDLOG_FUNCTION }, spdlog::level::error, __VA_ARGS__)
#else
#define ERROR(...) (void)0
#endif

#if LOGGER_ACTIVE_LEVEL <= LEVEL_CRITICAL
#define CRITICAL(...)              \
    (spdlog::default_logger_raw()) \
        ->log(spdlog::source_loc{ __FILE__, __LINE__, SPDLOG_FUNCTION }, spdlog::level::critical, __VA_ARGS__)
#else
#define CRITICAL(...) (void)0
#endif

#endif  // LOGGING_H
